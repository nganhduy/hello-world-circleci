# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1


commands:
  print_pipeline_id:
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs

jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: circleci/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, Fury!"
  say-world: 
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run: 
          name: "Say world"
          command: "echo My name is Fury!"
  say-env-variable:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "This is an example of environment variable"
          command: echo ${FURY} ${CLOUD} 
          environment:
            CLOUD: white
  save_hello_fury_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: "Output file for hello fury"
          command: mkdir -p workspace && echo "This is an example output" > workspace/output.txt      
      - persist_to_workspace:
          root: workspace
          paths:
            - output.txt
  print_output_file: 
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run: 
          name: "Print output file"
          command: cat /tmp/workspace/output.txt
  call_commands:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  failed_job:
    docker: 
      - image: circleci/node:13.8.0
    steps: 
      - run: exit 1
      - run:
          name: on error
          command: echo "hello world"
          when: on_fail
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-env-variable
      - say-hello
      - say-world:
          requires: 
            - say-hello
  store-file-workflow:
    jobs:
      - save_hello_fury_output
      - print_output_file: 
          requires: 
            - save_hello_fury_output
  reuse-command-workflow: 
    jobs:
      - call_commands
  fail-workflow:
    jobs: 
      - failed_job
